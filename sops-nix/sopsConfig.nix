{
  nixpkgs,
  user,
  environment ? "development", # production, staging, development
  hostname ? "unknown",
}: let
  # Validate environment parameter
  validEnvironments = [
    "production"
    "staging"
    "development"
    "legacy"
  ];
  isValidEnvironment = builtins.elem environment validEnvironments;

  # Environment-specific secret files with validation
  secretFiles = {
    production = ../secrets/production/secrets.yaml;
    staging = ../secrets/staging/secrets.yaml;
    development = ../secrets/development/secrets.yaml;
    legacy = ./secrets.yaml; # Backward compatibility
  };

  # System-specific secret files with fallback
  systemSecretFile = let
    systemFile = ../secrets/systems + "/${hostname}.yaml";
  in
    if builtins.pathExists systemFile
    then systemFile
    else null;

  userSecretFile = let
    userFile = ../secrets/users + "/${user}.yaml";
  in
    if builtins.pathExists userFile
    then userFile
    else null;

  # Production-ready sops configuration with security hardening
  commonSopsConfigBase = {
    sops = {
      # Environment-specific default file
      defaultSopsFile = secretFiles.${environment} or secretFiles.legacy;
      defaultSopsFormat = "yaml";

      # Age configuration with multiple key sources for redundancy
      age = {
        # Primary SSH host keys for system-level secrets
        sshKeyPaths = [
          "/etc/ssh/ssh_host_ed25519_key"
          "/etc/ssh/ssh_host_rsa_key" # Fallback for older systems
        ];
        # Secure key file location with proper permissions
        keyFile = "/var/lib/sops-nix/key.txt";
        generateKey = true;
      };

      # Security and validation settings
      validateSopsFiles = true;
      keepGenerations = 5; # Increased for better rollback capability

      # Template configuration for environment files
      templates = {
        # Environment variables template for applications
        "app.env" = {
          content = ''
            # Application Environment Variables
            # Generated by sops-nix
            ENVIRONMENT=${environment}
            HOSTNAME=${hostname}
            USER=${user}
          '';
        };
      };
    };
  };

  # Production secrets with comprehensive coverage and proper categorization
  productionSecrets = {
    # === API Keys and External Services ===
    anthropic_api_key = {
      owner = user;
      mode = "0400";
    };
    openai_api_key = {
      owner = user;
      mode = "0400";
    };
    azure_openai_api_key = {
      owner = user;
      mode = "0400";
    };
    github_token = {
      owner = user;
      mode = "0400";
    };
    gitlab_token = {
      owner = user;
      mode = "0400";
    };

    # === Cloud Infrastructure ===
    aws_access_key_id = {
      owner = user;
      mode = "0400";
    };
    aws_secret_access_key = {
      owner = user;
      mode = "0400";
    };
    aws_session_token = {
      owner = user;
      mode = "0400";
    };
    gcp_service_account_key = {
      owner = user;
      mode = "0400";
    };
    azure_client_secret = {
      owner = user;
      mode = "0400";
    };
    cloudflare_api_token = {
      owner = user;
      mode = "0400";
    };
    digitalocean_token = {
      owner = user;
      mode = "0400";
    };

    # === Database and Storage ===
    database_url = {
      owner = user;
      mode = "0400";
    };
    database_password = {
      owner = user;
      mode = "0400";
    };
    redis_url = {
      owner = user;
      mode = "0400";
    };
    redis_password = {
      owner = user;
      mode = "0400";
    };
    s3_bucket_key = {
      owner = user;
      mode = "0400";
    };

    # === Monitoring and Observability ===
    datadog_api_key = {
      owner = user;
      mode = "0400";
    };
    newrelic_license_key = {
      owner = user;
      mode = "0400";
    };
    sentry_dsn = {
      owner = user;
      mode = "0400";
    };
    prometheus_token = {
      owner = user;
      mode = "0400";
    };
    grafana_api_key = {
      owner = user;
      mode = "0400";
    };

    # === Security and Certificates ===
    backup_encryption_key = {
      owner = user;
      mode = "0400";
    };
    disaster_recovery_key = {
      owner = user;
      mode = "0400";
    };
    tls_private_key = {
      owner = "root";
      mode = "0400";
    };
    tls_certificate = {
      owner = "root";
      mode = "0444";
    };
    ssh_deploy_key = {
      owner = user;
      mode = "0400";
    };
    gpg_private_key = {
      owner = user;
      mode = "0400";
    };

    # === Application Secrets ===
    jwt_secret = {
      owner = user;
      mode = "0400";
    };
    session_secret = {
      owner = user;
      mode = "0400";
    };
    encryption_key = {
      owner = user;
      mode = "0400";
    };
    webhook_secret = {
      owner = user;
      mode = "0400";
    };

    # === Third-party Integrations ===
    stripe_secret_key = {
      owner = user;
      mode = "0400";
    };
    paypal_client_secret = {
      owner = user;
      mode = "0400";
    };
    twilio_auth_token = {
      owner = user;
      mode = "0400";
    };
    sendgrid_api_key = {
      owner = user;
      mode = "0400";
    };
    slack_webhook_url = {
      owner = user;
      mode = "0400";
    };
  };

  # Development secrets (subset of production with additional dev-specific secrets)
  developmentSecrets =
    productionSecrets
    // {
      # === Development-specific ===
      test_user_password = {
        owner = user;
        mode = "0400";
      };
      test_api_key = {
        owner = user;
        mode = "0400";
      };
      local_ssl_cert = {
        owner = user;
        mode = "0400";
      };
      local_ssl_key = {
        owner = user;
        mode = "0400";
      };
      dev_database_url = {
        owner = user;
        mode = "0400";
      };

      # === Network and Connectivity ===
      wifi_dev_network_password = {
        owner = user;
        mode = "0400";
      };
      vpn_dev_config = {
        owner = user;
        mode = "0400";
      };

      # === Development Tools ===
      docker_registry_token = {
        owner = user;
        mode = "0400";
      };
      npm_auth_token = {
        owner = user;
        mode = "0400";
      };
      pypi_token = {
        owner = user;
        mode = "0400";
      };
    };

  # Legacy secrets for backward compatibility
  legacySecrets = {
    test_secret = {
      owner = user;
      mode = "0400";
    };
    claude_api_key = {
      owner = user;
      mode = "0400";
    };
    openai_api_key = {
      owner = user;
      mode = "0400";
    };
    azure_openai_api_key = {
      owner = user;
      mode = "0400";
    };
    bedrock_keys = {
      owner = user;
      mode = "0400";
    };
    wifi_bubbles_passwd = {
      owner = user;
      mode = "0400";
    };
    wifi_eduroam_userID = {
      owner = user;
      mode = "0400";
    };
    wifi_eduroam_passwd = {
      owner = user;
      mode = "0400";
    };
    GH_TOKEN = {
      owner = user;
      mode = "0400";
    };
  };

  # Select secrets based on environment with validation
  environmentSecrets =
    if !isValidEnvironment
    then throw "Invalid environment '${environment}'. Must be one of: ${builtins.concatStringsSep ", " validEnvironments}"
    else {
      production = productionSecrets;
      staging = productionSecrets; # Use production secrets for staging
      development = developmentSecrets;
      legacy = legacySecrets;
    };

  # NixOS-specific sops configuration with enhanced security
  nixosSopsConfig = nixpkgs.lib.recursiveUpdate commonSopsConfigBase {
    sops = {
      secrets = environmentSecrets.${environment} or environmentSecrets.legacy;

      # Validation and error handling
      validateSopsFiles = true;

      # Environment-specific settings
      environment = {
        SOPS_ENVIRONMENT = environment;
        SOPS_HOSTNAME = hostname;
        SOPS_USER = user;
      };
    };
  };

  # Home Manager secrets (without owner and mode, with proper attribute handling)
  hmSecrets = builtins.mapAttrs (
    name: value:
      removeAttrs value [
        "owner"
        "mode"
      ]
  ) (environmentSecrets.${environment} or environmentSecrets.legacy);

  # Home Manager-specific sops configuration
  hmSopsConfig = nixpkgs.lib.recursiveUpdate commonSopsConfigBase {
    sops = {
      secrets = hmSecrets;

      # Home Manager specific settings
      age.keyFile = "/home/${user}/.config/sops/age/keys.txt";
      defaultSymlinkPath = "/run/user/1000/secrets";
      defaultSecretsMountPoint = "/run/user/1000/secrets.d";
    };
  };

  # Utility functions for secret management
  secretUtils = {
    # Function to check if a secret exists
    hasSecret = secretName:
      builtins.hasAttr secretName (environmentSecrets.${environment} or environmentSecrets.legacy);

    # Function to get secret path
    getSecretPath = secretName:
      if secretUtils.hasSecret secretName
      then "/run/secrets/${secretName}"
      else throw "Secret '${secretName}' not found in environment '${environment}'";

    # Function to validate environment
    validateEnvironment = env: builtins.elem env validEnvironments;

    # Function to list available secrets
    listSecrets = builtins.attrNames (environmentSecrets.${environment} or environmentSecrets.legacy);
  };

  # For backward compatibility, keep commonSopsConfig pointing to the NixOS version
  commonSopsConfig = nixosSopsConfig;
in {
  inherit
    commonSopsConfigBase
    nixosSopsConfig
    hmSopsConfig
    commonSopsConfig
    secretUtils
    validEnvironments
    ;

  # Export environment info for debugging
  environmentInfo = {
    inherit environment hostname user;
    isValidEnvironment = isValidEnvironment;
    hasSystemSecrets = systemSecretFile != null;
    hasUserSecrets = userSecretFile != null;
    secretCount = builtins.length secretUtils.listSecrets;
  };
}
